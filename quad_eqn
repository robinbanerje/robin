#include <stdio.h>
#include<math.h>

struct complex
{
float r;
float i;
};

/* Function return 0 if roots are equal, 1 if roots are real not equal, 2 if roots are complex */
int findroots(float a,float b, float c, struct complex *r1,struct complex *r2)
{   float d=((b*b)-(4*a*c));
    
    if(d>0)
    {
      r1->r=(-b+sqrt(d))/(2*a);
      r1->i=0;
      r2->r=(-b-sqrt(d))/(2*a);
      r2->i=0;
      return 1;  
    }
    
    else if(d==0)
    {
      r1->r=((-b)/(2*a));
      r2->r=((-b)/(2*a));
      r1->i=0;
      r2->i=0;
      return 0;
    }
    
    else
    {
      r1->r=(-b/(2*a)); 
      r1->i=(sqrt(-d)/(2*a));
      r2->r=(-b/(2*a));
      r1->i=(sqrt(-d)/(2*a));
      return 2;
    }

}

void printcomplex(struct complex r1,struct complex r2)
{
printf("%f+i(%f)  and  %f-i(%f)",r1.r,r1.i,r2.r,r2.i);
}

int main()
{
 int x,y,z,retval;
 
 printf("enter the coefficients:\n");
 scanf("%d%d%d",&x,&y,&z);            // code to get x,y,z
 struct complex r1;
 struct complex r2;
 retval=findroots(x,y,z,&r1,&r2);
 switch (retval)
 {
 case 0: printf("\n roots are equal: %f  and  %f",r1.r,r2.r);
         break;
 case 1: printf("\nroots are real not equal: %f  and  %f",r1.r,r2.r);
         break;
 case 2: printf("\nroots are complex: ");
         printcomplex(r1,r2);
         break;
 }
 return 0;
}
